Ruta -> http://localhost/POIS/usuarios/usuarios_controller

En esta versión funciona V1:
-	/newuser -> lleva al formulario para crear un nuevo usuario
- 	/updateuser/id_user -> lleva al formulario para modificar un usuario ya creado
-	/deleteuser/id_user -> borra el usuario de la BD
- 	listar -> http://localhost/POIS/usuarios/usuarios_controller

Ruta -> http://localhost/POIS/mapa

En esta versión funciona V2:
-	listar pois y mostrarlos en el mapa -> http://localhost/POIS/mapa
	-	no funciona el último POI de la lista
	-	no muestra el cartel con texto al pinchar sobre el POI

En esta versión funciona V3:
Ruta -> http://localhost/POIS/categorias/categorias_controller
-	/http://localhost/POIS/categorias/categorias_controller/newcategory-> lleva al formulario para crear una nueva categoría
- 	/updatecategory/id_cat -> lleva al formulario para modificar una categoría ya creada. No se puede actualizar la 0 (default).
		*Problema inicial -> no se podían crear categorías con más de una palabra porque no hacía bien la comprobación en los pasos por parámetro para otras funciones. Se ha modificaco la base de datos añadiendo una nueva columna id.
		Queda por hacer:
		- que acceda solo el Admin.
		- cascade con tabla id_poi_id_cat
-	/deletecategory/id_cat -> borra la categoria. No se puede actualizar la 0 (default).
		Queda por hacer:
		- que acceda solo el Admin.
		- que haga un delete cascade con la tabla id_poi_id_cat
- 	listar (no muestra la default) -> http://localhost/pruebaVistaControlador/categorias/categorias_controller

Ruta -> http://localhost/POIS/pois/pois_controller
-	/newpoi -> lleva al formulario para crear un nuevo poi
		Queda por hacer:
		- que el usuario sea el de la sesión.
		- que al insertarlo se inserte por defecto en id_poi_id_cat con la default.
		- elegir las categorías que quiere. Para eso hay que hacer un checbox y insertar en id_poi_id_cat.
- 	/updatepoi/id_poi -> lleva al formulario para modificar un poi ya creado.
		Queda por hacer:
		- elegir las categorías que quiere. Para eso hay que hacer un checbox y insertar en id_poi_id_cat.
-	/deletepoi/id_poi -> borra el poi.
		Queda por hacer:
		- que haga un delete cascade con la tabla id_poi_id_cat
- 	listar -> http://localhost/POIS/pois/pois_controller
- 	listar en mapa -> http://localhost/POIS/mapa

-	http://localhost/POIS/api devuelve un json con todos los pois

En esta versión funciona V4:
Ruta -> http://localhost/pruebaVistaControlador/login_controller/
	-	Lleva a un formulario para iniciar la sesión.
	-	La sesión que haya abierta, si la hay, se cierra antes de nada.
	-	Realiza la select en la base de datos (login_model) y se queda con la fila del usuario.
	-	Inicia una session (incluir librería session) $this->session->set_userdata($usuario); Contiene los datos del usuario excepto la contraseña. Se meten los datos en el array usuario así : 'id_usuario'=> $data['usuarios']->result()[0]->id_usuario, ...
		*	Me ha llevado un buen rato descubrir como meter y leer los datos de session
	-	En poi_controller he añadido la función getPoiUser(), que manda al modelo el id del usuario con sesión abierta para listar solo sus POIs.
	-	Ya que están guardados los datos del user en la sesión, hay un nuevo formulario de nuevo poi (form_new y form_new_admin).
		+	El form_new no contiene el campo para seleccionar el usuario del nuevo poi, ya que será el. Se recoje de la sesión abierta.
		+	El form_new_admin contiene el campo para seleccionar usuario.
			Queda por hacer:
			-	Un combobox con los usuario activos, excepto el admin.
		+	He modificado el insert de pois_model para que recoja el valor del usuario del poi de la sesión o del form.
	-	Nuevo formulario para el login.

En esta versión funciona V5:
	-	Para restringir los accesos a ciertas páginas hay que añadir esta variable al session: 
		$info_usuario=array('habilitado' =>TRUE)
		$this->session->set_userdata($info_usuario);
	-	En los controladores con acceso restringido a login hay que añadir:
			!isset($this->session->userdata['habilitado'])?   
	   		die('Página con acceso restringido. <a href="./login">Click aquí para hacer login</a>');

	   		Si es al administrador 

	   		if((!$this->session->userdata['habilitado']) || ($this->session->userdata['rol'] != 0))
	   		die('Página con acceso restringido. <a href="./login">Click aquí para hacer login</a>');

En esta versión funciona V5 (Alicia):

	-	Se envía correo al insertar un usuario con su contraseña.
	-	Formulario de recuperación de contraseña. Meter email que tenga en la BD.
		*	Problema: Solo con cuentas de gmail.
	-	Depurados algunos de los errores anteriores (no tenía variables de session -> if(isset)))

En esta versión funciona V7 (Alicia):

	-	deletes cascade
	-	combobox para elegir el rol (usuarios/form_new)
	-	combobox para elegir el usuario (pois/form_new_admin)
	-	checkbox con la lista de las categorias (solo hace el insert de una)

En esta versión funciona V8 (Alicia):

	-	inserta y modifica múltiples categorías
	-	en la base de datos hay un trigger que inserta la categoria por defecto. Lo he quitado del código

En esta versión funciona V9 (Alicia):

	-	inserta: 
		.	extras_poi ( http://localhost/POIS/pois/pois_controller/extraPoi )
		. 	multimedia ( http://localhost/POIS/pois/pois_controller/multimediaPoi )
		.	rrss_poi ( http://localhost/POIS/pois/pois_controller/socialPoi )
		.	redes sociales ( http://localhost/POIS/redes_sociales/redes_sociales_controller/newsocial )

	-	modifica: 
		.	extras_poi ( http://localhost/POIS/pois/pois_controller/updatepoi/$id )
		.	redes sociales ( http://localhost/POIS/redes_sociales/redes_sociales_controller/updatesocial/$id )
	
	-	elimina: 
		. redes sociales ( http://localhost/POIS/redes_sociales/redes_sociales_controller/deletesocial/$id )

	Queda por hacer:
		*	Tratar imágenes
		*	Update/delete extras_poi, multimedia, rrss_poi

En esta versión funciona V10 (Alicia):
	
	-	Nueva vista de update

En esta versión funciona V11 (Alicia):

	-	Updatea y visualiza imagenes (solo en Redes Sociales)
	*	Hacer lo de mas imágenes también en multimedia y en categorias

En esta versión funcion V12 (Alicia):
	-	Subir archivos de imagen (gif|jpg|png), si es necesario se pueden añadir más tipos.
		+	Para las categorias
		+ 	Para las redes sociales
		+	Para el multimedia del poi *** Hay que comprobar como se verá eso en la vista ***
			*	Se pueden subir multiples archivos de una vez
			*	Se pueden subir más tipos de archivo, la opción video (mp3|mp4)
		+ 	En ver detalle poi carrusel con imágenes

En esta versión funcion V13 (Alicia):
	-	Vista de update poi
		+	listar contenidos multimedia, añadir botón de eliminar cada uno
		+	añadir botón de añadir contenido multimedia (general)
		+	listar redes sociales, añadir botón de eliminar cada una
		+	añadir botón de añadir red social (general)
		*	pois_model.php (133)
				$this->db->order_by("tipo_recurso", "ASC"); 
